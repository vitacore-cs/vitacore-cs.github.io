[{"/Users/macbook/dev/sheduler-hospital/src/App.tsx":"1","/Users/macbook/dev/sheduler-hospital/src/components/Sheduler/Sheduler.tsx":"2","/Users/macbook/dev/sheduler-hospital/src/mock/mockData.ts":"3","/Users/macbook/dev/sheduler-hospital/src/reportWebVitals.ts":"4"},{"size":1440,"mtime":1608464280578,"results":"5","hashOfConfig":"6"},{"size":7131,"mtime":1608469465056,"results":"7","hashOfConfig":"6"},{"size":2163,"mtime":1608458908608,"results":"8","hashOfConfig":"6"},{"size":425,"mtime":1608390515245,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"17jipia",{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/macbook/dev/sheduler-hospital/src/App.tsx",[],"/Users/macbook/dev/sheduler-hospital/src/components/Sheduler/Sheduler.tsx",["19"],"import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport { oneUsl } from \"../../mock/mockData\";\nimport AccessTimeIcon from \"@material-ui/icons/AccessTime\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport BlockIcon from \"@material-ui/icons/Block\";\n\nconst days = [\n  \"Воскресенье\",\n  \"Понедельник\",\n  \"Вторник\",\n  \"Среда\",\n  \"Четверг\",\n  \"Пятница\",\n  \"Суббота\",\n];\nconst months = [\n  \"января\",\n  \"февраля\",\n  \"марта\",\n  \"апреля\",\n  \"мая\",\n  \"июня\",\n  \"июля\",\n  \"августа\",\n  \"сентября\",\n  \"октября\",\n  \"ноября\",\n  \"декабря\",\n];\n\ntype ShedulerPropsType = {\n  usl: oneUsl[];\n  dt?: Date;\n};\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"100%\",\n  },\n  container: {\n    maxHeight: 540,\n  },\n  stickyCell: {\n    position: \"sticky\",\n    background: \"#fff\",\n    left: 0,\n    zIndex: 1,\n    borderRight: \"1px solid rgba(224, 224, 224, 1)\",\n    borderLeft: \"1px solid rgba(224, 224, 224, 1)\",\n  },\n  sheduledIcon: {\n    color: \"white\",\n    backgroundColor: \"#c4c4c4\",\n    padding: \"4px 8px\",\n    marginLeft: \"2px\",\n    borderRadius: \"4px\",\n    fontSize: 14,\n  },\n  cellColumn: {\n    borderRight: \"1px solid rgba(224, 224, 224, 1)\",\n    borderTop: \"1px solid rgba(224, 224, 224, 1)\",\n  },\n  todayColumn: {\n    border: \"1px solid rgba(224, 224, 224, 1)\",\n    borderTop: \"5px solid #1a75ff\",\n  },\n  cell: {\n    borderRight: \"1px solid rgba(224, 224, 224, 1)\",\n  },\n  nowrap: {\n    whiteSpace: \"nowrap\",\n  },\n});\n\ntype RowType = {\n  value: any;\n  ctype: \"usl\" | \"uslCategory\";\n  rowname: string;\n};\n\ntype ColumnType = {\n  id: string;\n  label: string;\n  ctype: \"label\" | \"data\";\n  minWidth?: number;\n  align?: \"right\";\n};\n\ntype tableDataType = {\n  cols: ColumnType[];\n  rows: RowType[];\n};\n\ntype RenderDayProps = {\n  usls: oneUsl[];\n  dt: Date;\n};\n\ntype RenderUslProps = {\n  usl: oneUsl;\n  dt: Date;\n};\n\nexport default function Sheduler(props: ShedulerPropsType) {\n  const classes = useStyles();\n  const { usl } = props;\n  const [dt] = React.useState(props.dt ? props.dt : new Date());\n  const [table, setTable] = React.useState<tableDataType>({\n    cols: [],\n    rows: [],\n  });\n\n  const RenderUsl = (props: RenderUslProps) => {\n    const { usl, dt } = props;\n    if (usl.isAborted) {\n      // отмененное\n      return (\n        <BlockIcon\n          style={{ backgroundColor: \"#ff704d\" }}\n          className={classes.sheduledIcon}\n        />\n      );\n    }\n    if (!usl.isAborted && usl.dt < dt) {\n      // сделано\n      return (\n        <CheckIcon\n          style={{ backgroundColor: \"rgb(54, 187, 106)\" }}\n          className={classes.sheduledIcon}\n        />\n      );\n    }\n    if (!usl.isAborted && usl.dt > dt) {\n      // планируется\n      return <AccessTimeIcon className={classes.sheduledIcon} />;\n    }\n    return <>1</>;\n  };\n\n  const RenderDay = (props: RenderDayProps) => {\n    const { usls, dt } = props;\n    return (\n      <div className={classes.nowrap}>\n        {usls\n          .sort((a, b) => {\n            return a.dt > b.dt ? 1 : -1;\n          })\n          .map((u, n) => {\n            const key = `rd-${u.dt}-${n}`;\n            return <RenderUsl usl={u} dt={dt} key={key} />;\n          })}\n      </div>\n    );\n  };\n\n  const renderCell = (col: ColumnType, row: RowType) => {\n    // первая колонка\n    if (col.ctype === \"label\") {\n      if (row.ctype === \"uslCategory\") {\n        return <strong>{row.value}</strong>;\n      }\n      return row.value;\n    }\n    // Категория услуг - пустое значение\n    if (col.ctype === \"data\" && row.ctype === \"uslCategory\") {\n      return \"\";\n    }\n    // Один день назначений\n    if (col.ctype === \"data\" && row.ctype === \"usl\") {\n      return (\n        <RenderDay\n          usls={usl\n            .filter((i) => i.tday === col.label)\n            .filter((i) => i.name === row.value)}\n          dt={dt}\n        />\n      );\n    }\n\n    return <>Значение</>;\n  };\n\n  React.useEffect(() => {\n    // собираем строки\n    const uslCategory = Array.from(new Set(usl.map((i) => i.ctype))).sort();\n    const newRows: RowType[] = [];\n    uslCategory.forEach((v) => {\n      newRows.push({ value: v, ctype: \"uslCategory\", rowname: \"names\" });\n      const names = Array.from(\n        new Set(usl.filter((i) => i.ctype === v).map((i) => i.name))\n      ).sort();\n      names.forEach((n) => {\n        newRows.push({ value: n, ctype: \"usl\", rowname: \"names\" });\n      });\n    });\n    // собираем колонки\n    const newCols: ColumnType[] = [];\n    newCols.push({ id: \"Название\", label: \"\", ctype: \"label\" });\n    for (let i = -3; i < 4; i++) {\n      const d = new Date(dt.getTime());\n      d.setDate(d.getDate() + i);\n      const day = d.toISOString().substring(0, 10);\n      newCols.push({ id: day, label: day, ctype: \"data\" });\n    }\n    setTable({ rows: newRows, cols: newCols });\n  }, [usl, dt]);\n\n  React.useEffect(() => {\n    console.log(\"Table: \", table);\n    console.log(\"Usl:\", usl);\n  }, [table]);\n\n  const RenderTh = (col: ColumnType) => {\n    if (col.ctype === \"data\") {\n      const d = new Date(col.label);\n      return (\n        <span>\n          {`${d.getDate()} ${months[d.getMonth()]}`}\n          <br />\n          {days[d.getDay()]}\n        </span>\n      );\n    }\n    return col.label;\n  };\n\n  return (\n    <TableContainer className={classes.container}>\n      <Table stickyHeader aria-label=\"sticky table\" size=\"small\">\n        <TableHead>\n          <TableRow>\n            {table.cols.map((column) => (\n              <TableCell\n                key={column.id}\n                align={column.align}\n                style={{ minWidth: column.minWidth }}\n                className={\n                  column.label === dt.toISOString().substring(0, 10)\n                    ? classes.todayColumn\n                    : classes.cellColumn\n                }\n              >\n                {RenderTh(column)}\n              </TableCell>\n            ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {table.rows.map((row) => {\n            return (\n              <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.value}>\n                {table.cols.map((column, indx) => {\n                  return (\n                    <TableCell\n                      key={column.id}\n                      align={column.align}\n                      className={indx === 0 ? classes.stickyCell : classes.cell}\n                    >\n                      {renderCell(column, row)}\n                    </TableCell>\n                  );\n                })}\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n","/Users/macbook/dev/sheduler-hospital/src/mock/mockData.ts",[],"/Users/macbook/dev/sheduler-hospital/src/reportWebVitals.ts",[],{"ruleId":"20","severity":1,"message":"21","line":218,"column":6,"nodeType":"22","endLine":218,"endColumn":13,"suggestions":"23"},"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'usl'. Either include it or remove the dependency array.","ArrayExpression",["24"],{"desc":"25","fix":"26"},"Update the dependencies array to be: [table, usl]",{"range":"27","text":"28"},[5179,5186],"[table, usl]"]