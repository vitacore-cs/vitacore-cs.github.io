{"version":3,"sources":["components/Sheduler/helpers.ts","components/Sheduler/Sheduler.tsx","components/Sheduler/mockData.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["colors","days","months","useStyles","makeStyles","root","width","container","maxHeight","stickyCell","position","background","left","zIndex","borderRight","borderLeft","stickyColumn","borderTop","uslIcon","color","backgroundColor","padding","marginLeft","borderRadius","fontSize","cellColumn","todayColumn","border","cell","nowrap","whiteSpace","Sheduler","props","classes","usl","React","useState","dt","Date","cols","rows","table","setTable","renderCell","col","row","ctype","value","usls","filter","i","tday","label","name","className","sort","a","b","map","isAborted","style","isNotPlanned","useEffect","uslCategory","Array","from","Set","newRows","forEach","v","indx","push","n","newCols","id","d","getTime","setDate","getDate","day","toISOString","substring","console","log","RenderTh","getMonth","getDay","TableContainer","Table","stickyHeader","aria-label","size","TableHead","TableRow","column","index","TableCell","TableBody","hover","role","tabIndex","undefined","uslAll","variants","getRandomA","array","Math","floor","random","length","getRandomUsl","dateStart","dateEnd","start","end","randomCategory","randomUsl","ttime","genUsl","num","res","theme","createStyles","height","paper","spacing","App","setNum","setUsl","Paper","elevation","type","min","max","onChange","e","parseInt","target","Button","variant","onClick","paddingTop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6192e1d5.chunk.js","sourcesContent":["export const colors = [\n  \"#8B451333\",\n  \"#66CDAA33\",\n  \"#00BFFF33\",\n  \"#FF7F5033\",\n  \"#00800033\",\n  \"#80008033\",\n  \"#EE82EE33\",\n  \"#FFFF0033\",\n];\n\nexport const days = [\n  \"Воскресенье\",\n  \"Понедельник\",\n  \"Вторник\",\n  \"Среда\",\n  \"Четверг\",\n  \"Пятница\",\n  \"Суббота\",\n];\nexport const months = [\n  \"января\",\n  \"февраля\",\n  \"марта\",\n  \"апреля\",\n  \"мая\",\n  \"июня\",\n  \"июля\",\n  \"августа\",\n  \"сентября\",\n  \"октября\",\n  \"ноября\",\n  \"декабря\",\n];\n","import React from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport AccessTimeIcon from \"@material-ui/icons/AccessTime\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport BlockIcon from \"@material-ui/icons/Block\";\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\nimport { months, colors, days } from \"./helpers\";\nimport {\n  ShedulerPropsType,\n  OneUslType,\n  RowType,\n  ColumnType,\n  TableDataType,\n} from \"./types\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"100%\",\n  },\n  container: {\n    maxHeight: 540,\n  },\n  stickyCell: {\n    position: \"sticky\",\n    background: \"#fff\",\n    left: 0,\n    zIndex: 10,\n    borderRight: \"1px solid rgba(224, 224, 224, 1)\",\n    borderLeft: \"1px solid rgba(224, 224, 224, 1)\",\n  },\n  stickyColumn: {\n    position: \"sticky\",\n    background: \"rgba(224, 224, 224, 1)\",\n    left: 0,\n    zIndex: 11,\n    borderRight: \"1px solid rgba(224, 224, 224, 1)\",\n    borderLeft: \"1px solid rgba(224, 224, 224, 1)\",\n    borderTop: \"1px solid rgba(224, 224, 224, 1)\",\n  },\n  uslIcon: {\n    color: \"white\",\n    backgroundColor: \"#c4c4c4\",\n    padding: \"4px 8px\",\n    marginLeft: \"2px\",\n    borderRadius: \"4px\",\n    fontSize: 14,\n  },\n  cellColumn: {\n    borderRight: \"1px solid rgba(224, 224, 224, 1)\",\n    borderTop: \"1px solid rgba(224, 224, 224, 1)\",\n  },\n  todayColumn: {\n    border: \"1px solid rgba(224, 224, 224, 1)\",\n    borderTop: \"5px solid #1a75ff\",\n  },\n  cell: {\n    borderRight: \"1px solid rgba(224, 224, 224, 1)\",\n  },\n  nowrap: {\n    whiteSpace: \"nowrap\",\n  },\n});\n\nconst Sheduler = (props: ShedulerPropsType) => {\n  const classes = useStyles();\n  const { usl } = props;\n  const [dt] = React.useState(props.dt ? props.dt : new Date());\n  const [table, setTable] = React.useState<TableDataType>({\n    cols: [],\n    rows: [],\n  });\n\n  const renderDay = (usls: OneUslType[]) => {\n    return (\n      <div className={classes.nowrap}>\n        {usls\n          .sort((a, b) => {\n            return a.dt > b.dt ? 1 : -1;\n          })\n          .map((usl) => {\n            if (usl.isAborted) {\n              // отмененное\n              return (\n                <BlockIcon\n                  style={{ backgroundColor: \"#ff704d\" }}\n                  className={classes.uslIcon}\n                />\n              );\n            }\n            if (usl.isNotPlanned && usl.dt < dt) {\n              // внеплановые\n              return (\n                <AddCircleOutlineIcon\n                  style={{ backgroundColor: \"#ffcc99\" }}\n                  className={classes.uslIcon}\n                />\n              );\n            }\n            if (!usl.isAborted && usl.dt < dt) {\n              // сделано\n              return (\n                <CheckIcon\n                  style={{ backgroundColor: \"rgb(54, 187, 106)\" }}\n                  className={classes.uslIcon}\n                />\n              );\n            }\n            if (!usl.isAborted && usl.dt > dt) {\n              // планируется\n              return <AccessTimeIcon className={classes.uslIcon} />;\n            }\n            return <></>;\n          })}\n      </div>\n    );\n  };\n\n  const renderCell = (col: ColumnType, row: RowType) => {\n    // первая колонка\n    if (col.ctype === \"label\") {\n      if (row.ctype === \"uslCategory\") {\n        return <strong>{row.value}</strong>;\n      }\n      return row.value;\n    }\n    // Категория услуг - пустое значение\n    if (col.ctype === \"data\" && row.ctype === \"uslCategory\") {\n      return \"\";\n    }\n    // Один день назначений\n    if (col.ctype === \"data\" && row.ctype === \"usl\") {\n      return renderDay(\n        usl\n          .filter((i) => i.tday === col.label)\n          .filter((i) => i.name === row.value)\n      );\n    }\n    return <>Значение</>;\n  };\n\n  React.useEffect(() => {\n    // собираем строки\n    const uslCategory = Array.from(new Set(usl.map((i) => i.ctype))).sort();\n    const newRows: RowType[] = [];\n    uslCategory.forEach((v, indx) => {\n      newRows.push({ value: v, ctype: \"uslCategory\", color: colors[indx] });\n      const names = Array.from(\n        new Set(usl.filter((i) => i.ctype === v).map((i) => i.name))\n      ).sort();\n      names.forEach((n) => {\n        newRows.push({ value: n, ctype: \"usl\" });\n      });\n    });\n    // собираем колонки\n    const newCols: ColumnType[] = [];\n    newCols.push({ id: \"Название\", label: \"\", ctype: \"label\" });\n    for (let i = -3; i < 4; i++) {\n      const d = new Date(dt.getTime());\n      d.setDate(d.getDate() + i);\n      const day = d.toISOString().substring(0, 10);\n      newCols.push({ id: day, label: day, ctype: \"data\" });\n    }\n    setTable({ rows: newRows, cols: newCols });\n  }, [usl, dt]);\n\n  React.useEffect(() => {\n    console.log(\"Usl:\", usl);\n  }, [usl]);\n\n  const RenderTh = (col: ColumnType) => {\n    if (col.ctype === \"data\") {\n      const d = new Date(col.label);\n      return (\n        <span>\n          {`${d.getDate()} ${months[d.getMonth()]}`}\n          <br />\n          {days[d.getDay()]}\n        </span>\n      );\n    }\n    return col.label;\n  };\n\n  return (\n    <TableContainer className={classes.container}>\n      <Table stickyHeader aria-label=\"sticky table\" size=\"small\">\n        <TableHead>\n          <TableRow>\n            {table.cols.map((column, index) => (\n              <TableCell\n                key={column.id}\n                className={\n                  column.label === dt.toISOString().substring(0, 10)\n                    ? classes.todayColumn\n                    : index === 0\n                    ? classes.stickyColumn\n                    : classes.cellColumn\n                }\n              >\n                {RenderTh(column)}\n              </TableCell>\n            ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {table.rows.map((row) => {\n            return (\n              <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.value}>\n                {table.cols.map((column, indx) => (\n                  <TableCell\n                    key={column.id}\n                    className={\n                      column.ctype === \"label\"\n                        ? classes.stickyCell\n                        : classes.cell\n                    }\n                    style={{\n                      backgroundColor:\n                        row.color && column.ctype === \"label\"\n                          ? row.color\n                          : undefined,\n                    }}\n                  >\n                    {renderCell(column, row)}\n                  </TableCell>\n                ))}\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default Sheduler;\n","import { OneUslType, UslCategoryType } from './types'\n\n\ntype ltype = { ctype: UslCategoryType; variants: string[] }[];\n\nexport const uslAll: ltype = [\n  {\n    ctype: \"Hазначения\",\n    variants: [\n      \"Аккузид\",\n      //\"Алендроновая кислота\",\n      \"Аспирин-С\",\n      \"Диронет антигельминтик\",\n      //\"Чистотел Глистогон\",\n      //\"Бактериофаг протейный\",\n      //\"Банеоцин\",\n      //\"Берлитион 600\",\n      \"Бисопролол\",\n    ],\n  },\n  {\n    ctype: \"Консультации\",\n    variants: [\n      \"Хирург\",\n      \"Офтальмолог\",\n      //\"Невропатолог\",\n      \"Отоларинголог\",\n      //\"Терапевт\",\n    ],\n  },\n  {\n    ctype: \"Исследования\",\n    variants: [\"Общий анализ крови\", \"Анализ мочи\", \"Биопсия спинного мозга\"],\n  },\n];\n\nconst getRandomA = (array: Array<any>) => {\n  return array[Math.floor(Math.random() * array.length)];\n};\n\nconst randomDate = (start: Date, end: Date) => {\n  return new Date(\n    start.getTime() + Math.random() * (end.getTime() - start.getTime())\n  );\n};\n\nexport const getRandomUsl = (): OneUslType => {\n  const dateStart = new Date();\n  dateStart.setDate(dateStart.getDate() - 3);\n  const dateEnd = new Date();\n  dateEnd.setDate(dateEnd.getDate() + 3);\n\n  const dt = randomDate(dateStart, dateEnd);\n\n  const randomCategory = getRandomA(uslAll);\n  const randomUsl = getRandomA(randomCategory.variants);\n  return {\n    dt,\n    tday: dt.toISOString().substring(0, 10),\n    ttime: dt.toISOString().substring(11, 16),\n    name: randomUsl,\n    ctype: randomCategory.ctype,\n    isAborted: Math.random() > 0.9,\n    isNotPlanned: Math.random() > 0.9\n  };\n};\n\nexport const genUsl = (num?: number): OneUslType[] => {\n  const n = num ? num : 100;\n  let res: OneUslType[] = [];\n  for (let i = 0; i < n; i++) {\n    res.push(getRandomUsl());\n  }\n  return res;\n};\n","import React from \"react\";\nimport { Theme, createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Sheduler from \"./components/Sheduler/Sheduler\";\nimport { genUsl } from \"./components/Sheduler/mockData\";\nimport { OneUslType } from \"./components/Sheduler/types\";\nimport Button from \"@material-ui/core/Button\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      padding: 0,\n      width: \"100%\",\n      height: \"100%\",\n    },\n    paper: {\n      padding: theme.spacing(2),\n    },\n  })\n);\n\nfunction App() {\n  const classes = useStyles();\n  const [num, setNum] = React.useState(100);\n  const [usl, setUsl] = React.useState<OneUslType[]>(genUsl(num));\n\n  React.useEffect(() => {\n    console.log(\"Usl: \", usl);\n  }, [usl]);\n\n  return (\n    <div className={classes.root}>\n      <Paper elevation={3} className={classes.paper}>\n        <h3>Таблица назначений</h3>\n        <input\n          type=\"range\"\n          id=\"vol\"\n          name=\"vol\"\n          min=\"20\"\n          max=\"200\"\n          value={num}\n          onChange={(e) => setNum(parseInt(e.target.value))}\n        ></input>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => setUsl(genUsl(num))}\n        >\n          Сгенерировать ({num})\n        </Button>\n        <div style={{ paddingTop: 16 }}>\n          <Sheduler usl={usl} />\n        </div>\n      </Paper>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}